{
  "swagger": "2.0",
  "info": {
    "title": "proto/clarifai/api/endpoint.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/apps": {
      "get": {
        "summary": "List all the apps.",
        "operationId": "ListApps",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiAppResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/apps/{user_app_id.app_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nApps\n//////////////////////////////////////\nGet a specific app from an app.",
        "operationId": "GetApp",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleAppResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/billing_usage": {
      "get": {
        "summary": "Gets the billing cycle start and end date as well as invoice items.\nFIXME(zeiler): this path seems wrong, it should be by user I believe.",
        "operationId": "GetBillingUsage",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiGetBillingUsageResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/concepts": {
      "get": {
        "summary": "List all the concepts.",
        "operationId": "ListConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a concept to an app.",
        "operationId": "PostConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostConceptsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more concepts.",
        "operationId": "PatchConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchConceptsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/concepts/searches": {
      "post": {
        "summary": "Search over the concepts to find one or more you're looking for.\nThis leverage the \"body\" parameter because we also have page and\nper_page as url query param variables in this request.",
        "operationId": "PostConceptsSearches",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostConceptsSearchesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/concepts/status": {
      "get": {
        "summary": "//////////////////////////////////////\nConcepts\n//////////////////////////////////////\nList all the concepts with their positive and negative counts",
        "operationId": "GetConceptCounts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptCountResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/concepts/{concept_id}": {
      "get": {
        "summary": "Get a specific concept from an app.",
        "operationId": "GetConcept",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/concepts/{concept_id}/languages": {
      "get": {
        "summary": "List the concept in all the translated languages.",
        "operationId": "ListConceptLanguages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptLanguageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a new tranlsation for this concept.",
        "operationId": "PostConceptLanguages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptLanguageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostConceptLanguagesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch the name for a given language names by passing in a list of concepts with the new names\nfor the languages.",
        "operationId": "PatchConceptLanguages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptLanguageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchConceptLanguagesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/concepts/{concept_id}/languages/{language}": {
      "get": {
        "summary": "//////////////////////////////////////\nConcept Languages\n//////////////////////////////////////\nGet a specific concept from an app.",
        "operationId": "GetConceptLanguage",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleConceptLanguageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/concepts/{concept_id}/references": {
      "get": {
        "summary": "//////////////////////////////////////\nConcept Relationships\n//////////////////////////////////////\nList the concept in all the outside sources.",
        "operationId": "ListConceptReferences",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptReferenceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "url params for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/concepts/{concept_id}/{predicate}": {
      "get": {
        "summary": "This is a general path for all these relations\nconcepts/{concept_id}/hypernyms\nconcepts/{concept_id}/hyponyms",
        "operationId": "ListConceptRelations",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "predicate",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/d03cb6c65/{model_id}": {
      "get": {
        "summary": "NOTE: private API",
        "operationId": "GetModelWeight",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelWeightResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "This is included so that we can re-use this request for multiple\nrpcs with and without the version_id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/d03cb6c65/{model_id}/versions/{version_id}": {
      "get": {
        "summary": "NOTE: private API",
        "operationId": "GetModelWeight",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelWeightResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/example/echo": {
      "post": {
        "summary": "Common echo example.",
        "operationId": "Echo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiTestMessage"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiTestMessage"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/healthz": {
      "get": {
        "summary": "//////////////////////////////////////\nHealth Check for API\n//////////////////////////////////////",
        "operationId": "GetHealthz",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiGetHealthzResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/inputs": {
      "get": {
        "summary": "List all the inputs.",
        "operationId": "ListInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple inputs in one request.",
        "operationId": "DeleteInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteInputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a input to an app.",
        "operationId": "PostInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostInputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more inputs.",
        "operationId": "PatchInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchInputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/inputs/status": {
      "get": {
        "summary": "//////////////////////////////////////\nInputs\n//////////////////////////////////////\nPatch one or more inputs.",
        "operationId": "GetInputCount",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleInputCountResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/inputs/stream": {
      "get": {
        "summary": "Streams all the inputs starting from oldest assets.",
        "operationId": "StreamInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "last_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/inputs/{input_id}": {
      "get": {
        "summary": "Get a specific input from an app.",
        "operationId": "GetInput",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "input_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single input.",
        "operationId": "DeleteInput",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "input_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/login": {
      "post": {
        "operationId": "PostLogin",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleLoginResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostLoginRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models": {
      "get": {
        "summary": "List all the models.",
        "operationId": "ListModels",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple models in one request.",
        "operationId": "DeleteModels",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteModelsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a models to an app.",
        "operationId": "PostModels",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more models.",
        "operationId": "PatchModels",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchModelsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/searches": {
      "post": {
        "summary": "Search over the models to find one or more you're looking for.\nThis leverage the \"body\" parameter because we also have page and\nper_page as url query param variables in this request.",
        "operationId": "PostModelsSearches",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelsSearchesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nModels\n//////////////////////////////////////\nGet a specific model from an app.",
        "operationId": "GetModel",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "This is included so that we can re-use this request for multiple\nrpcs with and without the version_id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single model.",
        "operationId": "DeleteModel",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/feedback": {
      "post": {
        "summary": "Provide feedback for model predictions.",
        "operationId": "PostModelFeedback",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelFeedbackRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/inputs": {
      "get": {
        "summary": "List all the inputs.",
        "operationId": "ListModelInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/output_info": {
      "get": {
        "summary": "Get a the output info for a given model_id or model_id/version_id\ncombo.",
        "operationId": "GetModelOutputInfo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "This is included so that we can re-use this request for multiple\nrpcs with and without the version_id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/outputs": {
      "post": {
        "summary": "Get predicted outputs from the model.",
        "operationId": "PostModelOutputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiOutputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelOutputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/versions": {
      "get": {
        "summary": "List all the models.",
        "operationId": "ListModelVersions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiModelVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "concept_ids",
            "description": "To list only the model versions that have these concept ids present in them.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Create a new model version to trigger training of the model.\nNOTE: inconsistency: do we want this to return a SingleModelResponse?",
        "operationId": "PostModelVersions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelVersionsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/versions/{version_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nModel versions\n//////////////////////////////////////\nGet a specific model from an app.",
        "operationId": "GetModelVersion",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single model.",
        "operationId": "DeleteModelVersion",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/versions/{version_id}/feedback": {
      "post": {
        "summary": "Provide feedback for model predictions.",
        "operationId": "PostModelFeedback",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelFeedbackRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/versions/{version_id}/inputs": {
      "get": {
        "summary": "List all the inputs.",
        "operationId": "ListModelInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/versions/{version_id}/metrics": {
      "get": {
        "summary": "Get the evaluation metrics for a model version.",
        "operationId": "GetModelVersionMetrics",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields.confusion_matrix",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "fields.cooccurrence_matrix",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "fields.label_counts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "fields.binary_metrics",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "fields.test_set",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Get the evaluation metrics for a model version.",
        "operationId": "PostModelVersionMetrics",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelVersionMetricsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/versions/{version_id}/output_info": {
      "get": {
        "summary": "Get a the output info for a given model_id or model_id/version_id\ncombo.",
        "operationId": "GetModelOutputInfo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/models/{model_id}/versions/{version_id}/outputs": {
      "post": {
        "summary": "Get predicted outputs from the model.",
        "operationId": "PostModelOutputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiOutputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelOutputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/my_scopes": {
      "get": {
        "summary": "API Keys in the public API -- request is itself Key/Token authorized, and will tell\nthe user the scopes/access of the key/credential they're providing, as computed by\nour authorizer:",
        "operationId": "MyScopes",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiScopeResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/myscopes": {
      "get": {
        "summary": "API Keys in the public API -- request is itself Key/Token authorized, and will tell\nthe user the scopes/access of the key/credential they're providing, as computed by\nour authorizer:",
        "operationId": "MyScopes",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiScopeResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/public_workflows": {
      "get": {
        "summary": "List all the workflows.",
        "operationId": "ListPublicWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/scopes": {
      "get": {
        "operationId": "ListScopes",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiScopeDepsResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/searches": {
      "post": {
        "summary": "//////////////////////////////////////\nSearches\n//////////////////////////////////////\nPatch one or more users.",
        "operationId": "PostSearches",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiSearchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSearchesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/searches/feedback": {
      "post": {
        "summary": "Give search feedback.",
        "operationId": "PostSearchFeedback",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSearchFeedbackRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/signup": {
      "post": {
        "operationId": "PostSignup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleLoginResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSignupRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/status_codes": {
      "get": {
        "summary": "//////////////////////////////////////\nStatus Codes\n//////////////////////////////////////",
        "operationId": "ListStatusCodes",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiStatusCodeResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/status_codes/{status_code_id}": {
      "get": {
        "operationId": "GetStatusCode",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "status_code_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/subscriptions": {
      "get": {
        "summary": "//////////////////////////////////////\nSubscriptions\n//////////////////////////////////////",
        "operationId": "GetSubscription",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleSubscriptionResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      },
      "post": {
        "operationId": "PostSubscription",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleSubscriptionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/token": {
      "post": {
        "summary": "//////////////////////////////////////\nTokens (to be deprecated)\n//////////////////////////////////////\nNote(zeiler): the body doens't exist on /v2/token because it takes in some form data in the\nrequest. Don't add it as it will break the API Clients.",
        "operationId": "PostToken",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleTokenResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/usage_intervals": {
      "get": {
        "summary": "Get a list of valid usage intervals",
        "operationId": "ListUsageIntervals",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiListUsageIntervalsResponse"
            }
          }
        },
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users": {
      "patch": {
        "summary": "Patch one or more users.",
        "operationId": "PatchUsers",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchUsersRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nUsers\n//////////////////////////////////////\nGet a specific user from an user.",
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps": {
      "get": {
        "summary": "List all the apps.",
        "operationId": "ListApps",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiAppResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a app to an app.",
        "operationId": "PostApps",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiAppResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostAppsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more apps.",
        "operationId": "PatchApps",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiAppResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchAppsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nApps\n//////////////////////////////////////\nGet a specific app from an app.",
        "operationId": "GetApp",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleAppResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Search over the apps to find one or more you're looking for.\nThis leverage the \"body\" parameter because we also have page and\nper_page as url query param variables in this request.",
        "operationId": "DeleteApp",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/concepts": {
      "get": {
        "summary": "List all the concepts.",
        "operationId": "ListConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a concept to an app.",
        "operationId": "PostConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostConceptsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more concepts.",
        "operationId": "PatchConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchConceptsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/concepts/searches": {
      "post": {
        "summary": "Search over the concepts to find one or more you're looking for.\nThis leverage the \"body\" parameter because we also have page and\nper_page as url query param variables in this request.",
        "operationId": "PostConceptsSearches",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostConceptsSearchesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/concepts/status": {
      "get": {
        "summary": "//////////////////////////////////////\nConcepts\n//////////////////////////////////////\nList all the concepts with their positive and negative counts",
        "operationId": "GetConceptCounts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptCountResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/concepts/{concept_id}": {
      "get": {
        "summary": "Get a specific concept from an app.",
        "operationId": "GetConcept",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/concepts/{concept_id}/languages": {
      "get": {
        "summary": "List the concept in all the translated languages.",
        "operationId": "ListConceptLanguages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptLanguageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a new tranlsation for this concept.",
        "operationId": "PostConceptLanguages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptLanguageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostConceptLanguagesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch the name for a given language names by passing in a list of concepts with the new names\nfor the languages.",
        "operationId": "PatchConceptLanguages",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptLanguageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchConceptLanguagesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/concepts/{concept_id}/languages/{language}": {
      "get": {
        "summary": "//////////////////////////////////////\nConcept Languages\n//////////////////////////////////////\nGet a specific concept from an app.",
        "operationId": "GetConceptLanguage",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleConceptLanguageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/concepts/{concept_id}/references": {
      "get": {
        "summary": "//////////////////////////////////////\nConcept Relationships\n//////////////////////////////////////\nList the concept in all the outside sources.",
        "operationId": "ListConceptReferences",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptReferenceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "url params for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/concepts/{concept_id}/{predicate}": {
      "get": {
        "summary": "This is a general path for all these relations\nconcepts/{concept_id}/hypernyms\nconcepts/{concept_id}/hyponyms",
        "operationId": "ListConceptRelations",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "predicate",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/d03cb6c65/{model_id}": {
      "get": {
        "summary": "NOTE: private API",
        "operationId": "GetModelWeight",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelWeightResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "This is included so that we can re-use this request for multiple\nrpcs with and without the version_id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/d03cb6c65/{model_id}/versions/{version_id}": {
      "get": {
        "summary": "NOTE: private API",
        "operationId": "GetModelWeight",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelWeightResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/inputs": {
      "get": {
        "summary": "List all the inputs.",
        "operationId": "ListInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple inputs in one request.",
        "operationId": "DeleteInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteInputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a input to an app.",
        "operationId": "PostInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostInputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more inputs.",
        "operationId": "PatchInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchInputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/inputs/status": {
      "get": {
        "summary": "//////////////////////////////////////\nInputs\n//////////////////////////////////////\nPatch one or more inputs.",
        "operationId": "GetInputCount",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleInputCountResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/inputs/stream": {
      "get": {
        "summary": "Streams all the inputs starting from oldest assets.",
        "operationId": "StreamInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "last_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/inputs/{input_id}": {
      "get": {
        "summary": "Get a specific input from an app.",
        "operationId": "GetInput",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single input.",
        "operationId": "DeleteInput",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/keys": {
      "get": {
        "summary": "List keys by app_id",
        "operationId": "ListAppKeys",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiKeyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models": {
      "get": {
        "summary": "List all the models.",
        "operationId": "ListModels",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple models in one request.",
        "operationId": "DeleteModels",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteModelsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a models to an app.",
        "operationId": "PostModels",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more models.",
        "operationId": "PatchModels",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchModelsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/searches": {
      "post": {
        "summary": "Search over the models to find one or more you're looking for.\nThis leverage the \"body\" parameter because we also have page and\nper_page as url query param variables in this request.",
        "operationId": "PostModelsSearches",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelsSearchesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nModels\n//////////////////////////////////////\nGet a specific model from an app.",
        "operationId": "GetModel",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "This is included so that we can re-use this request for multiple\nrpcs with and without the version_id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single model.",
        "operationId": "DeleteModel",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/feedback": {
      "post": {
        "summary": "Provide feedback for model predictions.",
        "operationId": "PostModelFeedback",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelFeedbackRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/inputs": {
      "get": {
        "summary": "List all the inputs.",
        "operationId": "ListModelInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/output_info": {
      "get": {
        "summary": "Get a the output info for a given model_id or model_id/version_id\ncombo.",
        "operationId": "GetModelOutputInfo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "This is included so that we can re-use this request for multiple\nrpcs with and without the version_id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/outputs": {
      "post": {
        "summary": "Get predicted outputs from the model.",
        "operationId": "PostModelOutputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiOutputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelOutputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/versions": {
      "get": {
        "summary": "List all the models.",
        "operationId": "ListModelVersions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiModelVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "concept_ids",
            "description": "To list only the model versions that have these concept ids present in them.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Create a new model version to trigger training of the model.\nNOTE: inconsistency: do we want this to return a SingleModelResponse?",
        "operationId": "PostModelVersions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelVersionsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/versions/{version_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nModel versions\n//////////////////////////////////////\nGet a specific model from an app.",
        "operationId": "GetModelVersion",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single model.",
        "operationId": "DeleteModelVersion",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/versions/{version_id}/feedback": {
      "post": {
        "summary": "Provide feedback for model predictions.",
        "operationId": "PostModelFeedback",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelFeedbackRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/versions/{version_id}/inputs": {
      "get": {
        "summary": "List all the inputs.",
        "operationId": "ListModelInputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiInputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/versions/{version_id}/metrics": {
      "get": {
        "summary": "Get the evaluation metrics for a model version.",
        "operationId": "GetModelVersionMetrics",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields.confusion_matrix",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "fields.cooccurrence_matrix",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "fields.label_counts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "fields.binary_metrics",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "fields.test_set",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Get the evaluation metrics for a model version.",
        "operationId": "PostModelVersionMetrics",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelVersionMetricsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/versions/{version_id}/output_info": {
      "get": {
        "summary": "Get a the output info for a given model_id or model_id/version_id\ncombo.",
        "operationId": "GetModelOutputInfo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleModelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/models/{model_id}/versions/{version_id}/outputs": {
      "post": {
        "summary": "Get predicted outputs from the model.",
        "operationId": "PostModelOutputs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiOutputResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModelOutputsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/searches": {
      "post": {
        "summary": "//////////////////////////////////////\nSearches\n//////////////////////////////////////\nPatch one or more users.",
        "operationId": "PostSearches",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiSearchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSearchesRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/searches/feedback": {
      "post": {
        "summary": "Give search feedback.",
        "operationId": "PostSearchFeedback",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSearchFeedbackRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/visualizations": {
      "post": {
        "summary": "Create a new visualization.",
        "operationId": "PostVisualization",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVisualizationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostVisualizationRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/visualizations/app": {
      "get": {
        "summary": "//////////////////////////////////////\nVisualizations\n//////////////////////////////////////\nSee if there has been an app visualization.",
        "operationId": "GetAppVisualization",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVisualizationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/visualizations/{visualization_id}": {
      "get": {
        "summary": "Get an existing visualization by id.",
        "operationId": "GetVisualization",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVisualizationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "visualization_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/vocabs": {
      "get": {
        "summary": "List all the vocabs.",
        "operationId": "ListVocabs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiVocabResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple vocabs in one request.",
        "operationId": "DeleteVocabs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteVocabsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a vocab to an app.",
        "operationId": "PostVocabs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiVocabResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostVocabsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more vocabs.",
        "operationId": "PatchVocabs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiVocabResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchVocabsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/vocabs/{vocab_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nVocabs\n//////////////////////////////////////\nGet a specific vocab from an app.",
        "operationId": "GetVocab",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVocabResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single vocab.",
        "operationId": "DeleteVocab",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/vocabs/{vocab_id}/concepts": {
      "get": {
        "summary": "List all the vocabs.",
        "operationId": "ListVocabConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple concepts from a vocab in one request.",
        "operationId": "DeleteVocabConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteVocabConceptsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a vocab to an app.",
        "operationId": "PostVocabConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostVocabConceptsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/vocabs/{vocab_id}/concepts/{concept_id}": {
      "delete": {
        "summary": "Delete a single concept from a vocab.",
        "operationId": "DeleteVocabConcept",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/workflows": {
      "get": {
        "summary": "List all the workflows.",
        "operationId": "ListWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple workflows in one request.",
        "operationId": "DeleteWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteWorkflowsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a workflow to an app.",
        "operationId": "PostWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostWorkflowsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more workflows.",
        "operationId": "PatchWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchWorkflowsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/workflows/{workflow_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nWorkflows\n//////////////////////////////////////\nGet a specific workflow from an app.",
        "operationId": "GetWorkflow",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single workflow.",
        "operationId": "DeleteWorkflow",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/apps/{user_app_id.app_id}/workflows/{workflow_id}/results": {
      "post": {
        "summary": "Predict using a workflow.",
        "operationId": "PostWorkflowResults",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiPostWorkflowResultsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostWorkflowResultsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/billing_cycles": {
      "get": {
        "summary": "//////////////////////////////////////\nUsage Dashboard\n//////////////////////////////////////",
        "operationId": "ListUserBillingCycles",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiListUserBillingCyclesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/consent": {
      "post": {
        "summary": "Update gdpr fields to a specific user.",
        "operationId": "PostUserConsent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostUserConsentRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/historical_usage": {
      "post": {
        "operationId": "PostHistoricalUsage",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiPostHistoricalUsageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostHistoricalUsageRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/keys": {
      "get": {
        "summary": "List all the keys.",
        "operationId": "ListKeys",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiKeyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a key to an app.",
        "operationId": "PostKeys",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiKeyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostKeysRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more keys.",
        "operationId": "PatchKeys",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiKeyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchKeysRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/keys/{key_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nAPI Keys\n//////////////////////////////////////\nGet a specific key from an app.",
        "operationId": "GetKey",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleKeyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Search over the keys to find one or more you're looking for.\nThis leverage the \"body\" parameter because we also have page and\nper_page as url query param variables in this request.",
        "operationId": "DeleteKey",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/users/{user_app_id.user_id}/realtime_usage": {
      "get": {
        "operationId": "GetRealtimeUsage",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiGetRealtimeUsageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/verify_email": {
      "post": {
        "operationId": "PostVerifyEmail",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVerifyEmailResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostVerifyEmailRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/visualizations": {
      "post": {
        "summary": "Create a new visualization.",
        "operationId": "PostVisualization",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVisualizationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostVisualizationRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/visualizations/app": {
      "get": {
        "summary": "//////////////////////////////////////\nVisualizations\n//////////////////////////////////////\nSee if there has been an app visualization.",
        "operationId": "GetAppVisualization",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVisualizationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/visualizations/{visualization_id}": {
      "get": {
        "summary": "Get an existing visualization by id.",
        "operationId": "GetVisualization",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVisualizationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "visualization_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/vocabs": {
      "get": {
        "summary": "List all the vocabs.",
        "operationId": "ListVocabs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiVocabResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple vocabs in one request.",
        "operationId": "DeleteVocabs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteVocabsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a vocab to an app.",
        "operationId": "PostVocabs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiVocabResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostVocabsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more vocabs.",
        "operationId": "PatchVocabs",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiVocabResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchVocabsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/vocabs/{vocab_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nVocabs\n//////////////////////////////////////\nGet a specific vocab from an app.",
        "operationId": "GetVocab",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleVocabResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single vocab.",
        "operationId": "DeleteVocab",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/vocabs/{vocab_id}/concepts": {
      "get": {
        "summary": "List all the vocabs.",
        "operationId": "ListVocabConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple concepts from a vocab in one request.",
        "operationId": "DeleteVocabConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteVocabConceptsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a vocab to an app.",
        "operationId": "PostVocabConcepts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiConceptResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostVocabConceptsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/vocabs/{vocab_id}/concepts/{concept_id}": {
      "delete": {
        "summary": "Delete a single concept from a vocab.",
        "operationId": "DeleteVocabConcept",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "vocab_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "concept_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/workflows": {
      "get": {
        "summary": "List all the workflows.",
        "operationId": "ListWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete multiple workflows in one request.",
        "operationId": "DeleteWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteWorkflowsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "post": {
        "summary": "Add a workflow to an app.",
        "operationId": "PostWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostWorkflowsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "patch": {
        "summary": "Patch one or more workflows.",
        "operationId": "PatchWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiMultiWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPatchWorkflowsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/workflows/{workflow_id}": {
      "get": {
        "summary": "//////////////////////////////////////\nWorkflows\n//////////////////////////////////////\nGet a specific workflow from an app.",
        "operationId": "GetWorkflow",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSingleWorkflowResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_app_id.user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_app_id.app_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      },
      "delete": {
        "summary": "Delete a single workflow.",
        "operationId": "DeleteWorkflow",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBaseResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V2"
        ]
      }
    },
    "/v2/workflows/{workflow_id}/results": {
      "post": {
        "summary": "Predict using a workflow.",
        "operationId": "PostWorkflowResults",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiPostWorkflowResultsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostWorkflowResultsRequest"
            }
          }
        ],
        "tags": [
          "V2"
        ]
      }
    }
  },
  "definitions": {
    "GetModelVersionMetricsRequestFieldsValue": {
      "type": "object",
      "properties": {
        "confusion_matrix": {
          "type": "boolean",
          "format": "boolean"
        },
        "cooccurrence_matrix": {
          "type": "boolean",
          "format": "boolean"
        },
        "label_counts": {
          "type": "boolean",
          "format": "boolean"
        },
        "binary_metrics": {
          "type": "boolean",
          "format": "boolean"
        },
        "test_set": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiAnd": {
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/apiInput"
        },
        "output": {
          "$ref": "#/definitions/apiOutput"
        },
        "negate": {
          "type": "boolean",
          "format": "boolean",
          "title": "If True then this will flip the meaning of this part of the\nquery. This allow for queries such as dog AND ! metadata=={\"blah\":\"value\"}"
        }
      }
    },
    "apiApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "default_language": {
          "type": "string"
        },
        "default_workflow_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "legal_consent_status": {
          "type": "integer",
          "format": "int64",
          "title": "if user accept legal consent for face recognition"
        },
        "last_input_added": {
          "$ref": "#/definitions/apiInput",
          "description": "Other fields controlled by url params."
        },
        "input_count": {
          "$ref": "#/definitions/apiInputCount"
        },
        "active_concept_count": {
          "type": "integer",
          "format": "int64"
        },
        "v1_id": {
          "type": "integer",
          "format": "int64",
          "description": "Deprecated fields soon to be removed."
        },
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        }
      }
    },
    "apiBillingCycle": {
      "type": "object",
      "properties": {
        "start_date": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "cycle_id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiBinaryMetrics": {
      "type": "object",
      "properties": {
        "num_pos": {
          "type": "integer",
          "format": "int64"
        },
        "num_neg": {
          "type": "integer",
          "format": "int64"
        },
        "num_tot": {
          "type": "integer",
          "format": "int64"
        },
        "roc_auc": {
          "type": "number",
          "format": "float"
        },
        "f1": {
          "type": "number",
          "format": "float"
        },
        "concept": {
          "$ref": "#/definitions/apiConcept"
        },
        "roc_curve": {
          "$ref": "#/definitions/apiROC"
        },
        "precision_recall_curve": {
          "$ref": "#/definitions/apiPrecisionRecallCurve"
        }
      }
    },
    "apiBoundingBox": {
      "type": "object",
      "properties": {
        "top_row": {
          "type": "number",
          "format": "float"
        },
        "left_col": {
          "type": "number",
          "format": "float"
        },
        "bottom_row": {
          "type": "number",
          "format": "float"
        },
        "right_col": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiCluster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "apiColor": {
      "type": "object",
      "properties": {
        "raw_hex": {
          "type": "string"
        },
        "w3c": {
          "$ref": "#/definitions/apiW3C"
        },
        "value": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiConcept": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The concept's unique id."
        },
        "name": {
          "type": "string",
          "description": "The name of the concept in the given language."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "Used ot indicate presence (1.0) or not (0.0) of this concept when making a request.\nThis is also the prediction probability when returning predictions from our API.\nFor convenience we use the default of 1.0 when making requests so the concept you provide is\nis treated as a positive (1.0) and not a negative (which would be value == 0.0)."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "language": {
          "type": "string",
          "description": "The language in which the concept name is in. This is ONLY used in the response and setting\nthis here in a request is ignored since the default language of your app is used when creating\nor patching a Concept. To set other languages for your concept use ConceptLanguage object and\nit's corresponding endpoints."
        },
        "app_id": {
          "type": "string",
          "description": "The application id that this concept is within."
        },
        "definition": {
          "type": "string",
          "description": "The definition for the concept."
        }
      }
    },
    "apiConceptCount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "concept_type_count": {
          "$ref": "#/definitions/apiConceptTypeCount"
        }
      }
    },
    "apiConceptLanguage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is the language code for the language such as \"en\"."
        },
        "name": {
          "type": "string",
          "description": "The type of the outside source."
        },
        "definition": {
          "type": "string",
          "description": "The ID that is referenced in the source."
        }
      },
      "description": "This represents a link to an outside source for the given concept.\nThe values from here are sticked into Concept message into the name and definition fields when\nreturning from the API in your default language. The \"id\" field here becomes the \"language\"\nfield of the Concept message which is a little weird."
    },
    "apiConceptQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "apiConceptReference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The link's unique id."
        },
        "source": {
          "type": "string",
          "description": "The type of the outside source."
        },
        "source_id": {
          "type": "string",
          "description": "The ID that is referenced in the source."
        },
        "source_url": {
          "type": "string",
          "title": "A url (if available) to the outside source. Usually built from the foreign_id"
        }
      },
      "description": "This represents a link to an outside source for the given concept."
    },
    "apiConceptTypeCount": {
      "type": "object",
      "properties": {
        "positive": {
          "type": "integer",
          "format": "int64"
        },
        "negative": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiConfusionMatrix": {
      "type": "object",
      "properties": {
        "matrix": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConfusionMatrixEntry"
          }
        },
        "concept_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "These concept_ids are orderd by the strength of the diagonal in the ConfusionMatrix."
        }
      }
    },
    "apiConfusionMatrixEntry": {
      "type": "object",
      "properties": {
        "predicted": {
          "type": "string"
        },
        "actual": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiCooccurrenceMatrix": {
      "type": "object",
      "properties": {
        "matrix": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiCooccurrenceMatrixEntry"
          }
        },
        "concept_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "These concept_ids are orderd by the strength of the diagonal in the ConfusionMatrix."
        }
      }
    },
    "apiCooccurrenceMatrixEntry": {
      "type": "object",
      "properties": {
        "row": {
          "type": "string",
          "title": "concept_id for the row"
        },
        "col": {
          "type": "string",
          "title": "concept_id for the col"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "NOTE: this is inefficient, should just have the order of the rows/cols"
    },
    "apiData": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/apiImage",
          "description": "The concept's unique id."
        },
        "video": {
          "$ref": "#/definitions/apiVideo"
        },
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        },
        "face": {
          "$ref": "#/definitions/apiFace"
        },
        "metadata": {
          "$ref": "#/definitions/protobufStruct",
          "title": "To handle arbitrary json metadata you can use a struct field:\nhttps://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto"
        },
        "geo": {
          "$ref": "#/definitions/apiGeo"
        },
        "colors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiColor"
          },
          "description": "In responses you can also expect these fields."
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiCluster"
          }
        },
        "embeddings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEmbedding"
          }
        },
        "focus": {
          "$ref": "#/definitions/apiFocus"
        },
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRegion"
          },
          "description": "For recursing into localized regions of an input."
        },
        "frames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFrame"
          },
          "description": "For temporal content like video."
        }
      }
    },
    "apiDeleteAppRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        }
      }
    },
    "apiDeleteInputRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "input_id": {
          "type": "string"
        }
      }
    },
    "apiDeleteInputsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delete_all": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Request to delete several things by the list of ids."
    },
    "apiDeleteKeyRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "key_id": {
          "type": "string"
        }
      }
    },
    "apiDeleteModelRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        }
      }
    },
    "apiDeleteModelVersionRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        }
      }
    },
    "apiDeleteModelsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delete_all": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Request to delete several things by the list of ids."
    },
    "apiDeleteVocabConceptRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "vocab_id": {
          "type": "string"
        },
        "concept_id": {
          "type": "string"
        }
      },
      "description": "This lets you delete a specific concept fron the vocab (not from your app)."
    },
    "apiDeleteVocabConceptsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "vocab_id": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delete_all": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Request to delete several concepts from vocab by the list of ids.\nThe delete_all in this case will empty the vocab to start over.\nIn either case the concepts will remain in your app."
    },
    "apiDeleteVocabRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "vocab_id": {
          "type": "string"
        }
      }
    },
    "apiDeleteVocabsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delete_all": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Request to delete several things by the list of ids."
    },
    "apiDeleteWorkflowRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "workflow_id": {
          "type": "string"
        }
      }
    },
    "apiDeleteWorkflowsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delete_all": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Request to delete several things by the list of ids."
    },
    "apiDimensionList": {
      "type": "object",
      "properties": {
        "dimension": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "int_value_list": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date-time"
        },
        "end_date": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "//////////////////////////////////////\nUsage Dashboard\n//////////////////////////////////////"
    },
    "apiEmailAddress": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "format": "boolean"
        },
        "verified": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiEmbedding": {
      "type": "object",
      "properties": {
        "vector": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "num_dimensions": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiEvalMetrics": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "summary": {
          "$ref": "#/definitions/apiMetricsSummary"
        },
        "confusion_matrix": {
          "$ref": "#/definitions/apiConfusionMatrix"
        },
        "cooccurrence_matrix": {
          "$ref": "#/definitions/apiCooccurrenceMatrix"
        },
        "label_counts": {
          "$ref": "#/definitions/apiLabelDistribution"
        },
        "binary_metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiBinaryMetrics"
          }
        },
        "test_set": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEvalTestSetEntry"
          }
        }
      }
    },
    "apiEvalTestSetEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "predicted_concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        },
        "ground_truth_concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        }
      }
    },
    "apiEventType": {
      "type": "string",
      "enum": [
        "undefined",
        "search_click",
        "annotation"
      ],
      "default": "undefined",
      "title": "- undefined: default type is UNDEFINED if not specified"
    },
    "apiFace": {
      "type": "object",
      "properties": {
        "identity": {
          "$ref": "#/definitions/apiFaceIdentity"
        },
        "age_appearance": {
          "$ref": "#/definitions/apiFaceAge"
        },
        "gender_appearance": {
          "$ref": "#/definitions/apiFaceGenderIdentity"
        },
        "multicultural_appearance": {
          "$ref": "#/definitions/apiFaceMCAffinity"
        }
      }
    },
    "apiFaceAge": {
      "type": "object",
      "properties": {
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        }
      }
    },
    "apiFaceGenderIdentity": {
      "type": "object",
      "properties": {
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        }
      }
    },
    "apiFaceIdentity": {
      "type": "object",
      "properties": {
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        }
      }
    },
    "apiFaceMCAffinity": {
      "type": "object",
      "properties": {
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        }
      }
    },
    "apiFeedbackInfo": {
      "type": "object",
      "properties": {
        "end_user_id": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        },
        "event_type": {
          "$ref": "#/definitions/apiEventType",
          "description": "Valid inputs currently are \"search_click\" and \"annotation\"."
        },
        "output_id": {
          "type": "string"
        },
        "search_id": {
          "type": "string"
        }
      }
    },
    "apiFocus": {
      "type": "object",
      "properties": {
        "density": {
          "type": "number",
          "format": "float"
        },
        "value": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiFrame": {
      "type": "object",
      "properties": {
        "frame_info": {
          "$ref": "#/definitions/apiFrameInfo"
        },
        "data": {
          "$ref": "#/definitions/apiData"
        }
      }
    },
    "apiFrameInfo": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "title": "time in the video in milliseconds"
        }
      }
    },
    "apiGeo": {
      "type": "object",
      "properties": {
        "geo_point": {
          "$ref": "#/definitions/apiGeoPoint"
        },
        "geo_limit": {
          "$ref": "#/definitions/apiGeoLimit"
        },
        "geo_box": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiGeoBoxedPoint"
          },
          "title": "NOTE: inconsistency: should have been geo_boxed_points"
        }
      }
    },
    "apiGeoBoxedPoint": {
      "type": "object",
      "properties": {
        "geo_point": {
          "$ref": "#/definitions/apiGeoPoint"
        }
      }
    },
    "apiGeoLimit": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiGeoPoint": {
      "type": "object",
      "properties": {
        "longitude": {
          "type": "number",
          "format": "float"
        },
        "latitude": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiGetAppRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        }
      }
    },
    "apiGetAppVisualizationRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        }
      }
    },
    "apiGetBillingUsageRequest": {
      "type": "object",
      "title": "////////////\nBilling Usage"
    },
    "apiGetBillingUsageResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "invoice_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInvoiceItem"
          }
        },
        "billing_cycle": {
          "$ref": "#/definitions/apiBillingCycle"
        }
      }
    },
    "apiGetConceptCountsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiGetConceptLanguageRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "concept_id": {
          "type": "string"
        },
        "language": {
          "type": "string",
          "description": "This is the language identifier."
        }
      },
      "description": "GET single concept language for the given concept."
    },
    "apiGetConceptRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "concept_id": {
          "type": "string"
        }
      }
    },
    "apiGetHealthzRequest": {
      "type": "object"
    },
    "apiGetHealthzResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "time": {
          "type": "string"
        }
      }
    },
    "apiGetInputCountRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        }
      }
    },
    "apiGetInputRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "input_id": {
          "type": "string"
        }
      }
    },
    "apiGetKeyRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "key_id": {
          "type": "string"
        }
      }
    },
    "apiGetModelRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string",
          "description": "This is included so that we can re-use this request for multiple\nrpcs with and without the version_id."
        },
        "language": {
          "type": "string"
        }
      }
    },
    "apiGetModelVersionMetricsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        },
        "fields": {
          "$ref": "#/definitions/GetModelVersionMetricsRequestFieldsValue",
          "title": "Any of the fields you wish to return from multiclass_metrics"
        }
      },
      "description": "Get the already computed evaluation metrics for this model\nversion."
    },
    "apiGetModelVersionRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        }
      },
      "description": "NOTE: this is same as GetModelRequest but backend doesn't support sharing same\nrequest for different endpoints currently."
    },
    "apiGetModelWeightRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string",
          "description": "This is included so that we can re-use this request for multiple\nrpcs with and without the version_id."
        }
      }
    },
    "apiGetRealtimeUsageRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        }
      }
    },
    "apiGetRealtimeUsageResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "realtime_usage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRealtimeCount"
          }
        }
      }
    },
    "apiGetStatusCodeRequest": {
      "type": "object",
      "properties": {
        "status_code_id": {
          "type": "string"
        }
      }
    },
    "apiGetSubscriptionRequest": {
      "type": "object",
      "description": "Gets a the current subscription based on your session token."
    },
    "apiGetUserRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet",
          "description": "Only user id should be populated. This can be the special\nuser_id \"me\" as well."
        }
      }
    },
    "apiGetVisualizationRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "visualization_id": {
          "type": "string"
        }
      }
    },
    "apiGetVocabRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "vocab_id": {
          "type": "string"
        }
      },
      "description": "////////////////////\nRequests\n////////////////////\nGET single vocab by id."
    },
    "apiGetWorkflowRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "workflow_id": {
          "type": "string"
        }
      }
    },
    "apiHit": {
      "type": "object",
      "properties": {
        "score": {
          "type": "number",
          "format": "float"
        },
        "input": {
          "$ref": "#/definitions/apiInput"
        }
      }
    },
    "apiImage": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "This is a URL to a publicly accessible image file. The platform will download this file server\nside and then process."
        },
        "base64": {
          "type": "string",
          "format": "byte",
          "description": "The base64 field is using image file bytes directly in the request.\nNOTE: if you're sending a json request, then this MUST be base64 encoded before sending (hence\nthe name here).\nWhen using our grpc clients, you DO NOT need to base64 encode\nit yourself since the clients know how to do this for you automatically and will avoid the\nbase64 encoding if they send a binary request."
        },
        "crop": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "allow_duplicate_url": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiInput": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The concept's unique id."
        },
        "data": {
          "$ref": "#/definitions/apiData",
          "description": "The data passed along in this input."
        },
        "feedback_info": {
          "$ref": "#/definitions/apiFeedbackInfo",
          "description": "Feedback information for when the data sent back is related to a\nfeedback event."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the object was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "modified_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the object  was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is the status at a per Input level which allows for\npartial failures."
        }
      }
    },
    "apiInputCount": {
      "type": "object",
      "properties": {
        "processed": {
          "type": "integer",
          "format": "int64"
        },
        "to_process": {
          "type": "integer",
          "format": "int64"
        },
        "errors": {
          "type": "integer",
          "format": "int64"
        },
        "processing": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "NOTE: inconsistency: this is weird mix of plural and singular words."
    },
    "apiInvoiceItem": {
      "type": "object",
      "properties": {
        "op_type": {
          "type": "string"
        },
        "bill_type": {
          "type": "string"
        },
        "price_per_op": {
          "type": "number",
          "format": "double"
        },
        "count": {
          "type": "number",
          "format": "double"
        },
        "dollars": {
          "type": "number",
          "format": "double"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "apiKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiApp"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        }
      }
    },
    "apiLabelCount": {
      "type": "object",
      "properties": {
        "concept_name": {
          "type": "string",
          "description": "FIXME: should move to Concept object and return the whole thing (including name and id)\notherwise if two concepts have same name then you won't tell them apart in confusion matrix."
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiLabelDistribution": {
      "type": "object",
      "properties": {
        "positive_label_counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiLabelCount"
          }
        }
      }
    },
    "apiListAppKeysRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiListAppsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiListConceptLanguagesRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "concept_id": {
          "type": "string"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "List multiple concept languages for the given concept."
    },
    "apiListConceptReferencesRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet",
          "description": "The user id and app id set in the url."
        },
        "concept_id": {
          "type": "string",
          "description": "The concept id you want to list translations for."
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "description": "url params for pagination."
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiListConceptRelationsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "concept_id": {
          "type": "string"
        },
        "predicate": {
          "type": "string",
          "description": "This is part of the url so we can extend to multiple link types in the future."
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiListConceptsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiListInputsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiListKeysRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiListModelInputsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "Listing the inputs that went into training this model."
    },
    "apiListModelVersionsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        },
        "concept_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "To list only the model versions that have these concept ids present in them."
        }
      }
    },
    "apiListModelsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiListPublicWorkflowsRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiListScopesRequest": {
      "type": "object"
    },
    "apiListStatusCodesRequest": {
      "type": "object"
    },
    "apiListUsageIntervalsRequest": {
      "type": "object"
    },
    "apiListUsageIntervalsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "usage_intervals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUsageInterval"
          }
        }
      }
    },
    "apiListUserBillingCyclesRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiListUserBillingCyclesResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "billing_cycles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiBillingCycle"
          }
        }
      }
    },
    "apiListVocabConceptsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "vocab_id": {
          "type": "string"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "List concepts in a vocab. There is"
    },
    "apiListVocabsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "List multiple vocabs."
    },
    "apiListWorkflowsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiMask": {
      "type": "object",
      "properties": {
        "color": {
          "$ref": "#/definitions/apiColor"
        },
        "image": {
          "$ref": "#/definitions/apiImage"
        }
      }
    },
    "apiMetricsSummary": {
      "type": "object",
      "properties": {
        "top1_accuracy": {
          "type": "number",
          "format": "float"
        },
        "top5_accuracy": {
          "type": "number",
          "format": "float"
        },
        "macro_avg_roc_auc": {
          "type": "number",
          "format": "float"
        },
        "macro_std_roc_auc": {
          "type": "number",
          "format": "float"
        },
        "macro_avg_f1_score": {
          "type": "number",
          "format": "float"
        },
        "macro_std_f1_score": {
          "type": "number",
          "format": "float"
        },
        "macro_avg_precision": {
          "type": "number",
          "format": "float"
        },
        "macro_avg_recall": {
          "type": "number",
          "format": "float"
        }
      },
      "description": "FIXME: copy this into an internal proto since it is stored in DB and field names can't change."
    },
    "apiModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The model's ID. Must be unique within a particular app and URL-friendly."
        },
        "name": {
          "type": "string",
          "description": "A nicer-to-read name for the model. Can have spaces and special characters."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the model was created."
        },
        "app_id": {
          "type": "string",
          "description": "The app the model belongs to."
        },
        "output_info": {
          "$ref": "#/definitions/apiOutputInfo",
          "description": "Info about the model's output and configuration.\nFIXME(zeiler): this should really be on the model version object like it is represented in the\nDB because fields here can be changed per version."
        },
        "model_version": {
          "$ref": "#/definitions/apiModelVersion",
          "description": "A particular version of the model, e.g., to specify the version when creating a workflow."
        },
        "display_name": {
          "type": "string",
          "description": "An even nicer-to-read name for public Clarifai models where we're not happy with the name but\nneed a temporary workaround while we check what depends on these names."
        }
      }
    },
    "apiModelQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "apiModelVersion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the version was created."
        },
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "The status of the version (whether it's untrained, training, trained, etc.)."
        },
        "active_concept_count": {
          "type": "integer",
          "format": "int64"
        },
        "metrics": {
          "$ref": "#/definitions/apiEvalMetrics"
        },
        "total_input_count": {
          "type": "integer",
          "format": "int64",
          "title": "number of inputs in the model version"
        },
        "pretrained_model_config": {
          "$ref": "#/definitions/apiPretrainedModelConfig",
          "description": "This is the internal name for the ModelVersion when creating a new model at Clarifai. If you're\nan API user you should not need to interact with this field."
        }
      }
    },
    "apiMultiAppResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiApp"
          }
        }
      }
    },
    "apiMultiConceptCountResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "concept_counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConceptCount"
          }
        }
      }
    },
    "apiMultiConceptLanguageResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "concept_languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConceptLanguage"
          }
        }
      }
    },
    "apiMultiConceptReferenceResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "concept_references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConceptReference"
          }
        }
      }
    },
    "apiMultiConceptResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        }
      }
    },
    "apiMultiInputResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInput"
          }
        }
      }
    },
    "apiMultiKeyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiKey"
          }
        }
      }
    },
    "apiMultiModelResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiModel"
          }
        }
      }
    },
    "apiMultiModelVersionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "model_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiModelVersion"
          }
        }
      }
    },
    "apiMultiOutputResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOutput"
          }
        }
      },
      "title": "//////////////////////////////////////////////////\nOutputs related requests\n//////////////////////////////////////////////////"
    },
    "apiMultiScopeDepsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiScopeDeps"
          }
        }
      }
    },
    "apiMultiScopeResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "app": {
          "$ref": "#/definitions/apiApp"
        }
      }
    },
    "apiMultiSearchResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "id": {
          "type": "string"
        },
        "hits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiHit"
          }
        }
      }
    },
    "apiMultiStatusCodeResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/statusStatus"
          }
        }
      }
    },
    "apiMultiUserResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUser"
          }
        }
      }
    },
    "apiMultiVocabResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "vocabs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiVocab"
          }
        }
      },
      "description": "Multiple vocabs to return."
    },
    "apiMultiWorkflowResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "workflows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiWorkflow"
          }
        }
      }
    },
    "apiMyScopesRequest": {
      "type": "object"
    },
    "apiOutput": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "One of these outputs per Input"
        },
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the object was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "model": {
          "$ref": "#/definitions/apiModel",
          "description": "The model that created this Output."
        },
        "input": {
          "$ref": "#/definitions/apiInput",
          "description": "The input that was passed to the model to create this Output. For example if we have an image\nmodel then it will take as input here an Input object with Image filled in."
        },
        "data": {
          "$ref": "#/definitions/apiData",
          "description": "The output data for this Output. For example if we have a concept model then the predicted\nconcepts will appear here."
        }
      }
    },
    "apiOutputConfig": {
      "type": "object",
      "properties": {
        "concepts_mutually_exclusive": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the concept predictions must sum to 1."
        },
        "closed_environment": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether negatives should only be sampled from within the app during training, for custom models."
        },
        "existing_model_id": {
          "type": "string",
          "description": "DEPRECATED: For custom models, this is the base model to use for image embeddings.\nDefault is general model."
        },
        "language": {
          "type": "string",
          "description": "Overrides the default_language for the app in a predict call."
        },
        "hyper_parameters": {
          "type": "string",
          "description": "Hyper-parameters for custom training."
        },
        "max_concepts": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of concepts in result. Defaults to 0 which under the hood will return default of\n20. We do a server side default in order to control this feature in the future."
        },
        "min_value": {
          "type": "number",
          "format": "float",
          "description": "Minimum value of concept's probability score in result. Defaults to 0.0 which means we won't do\nany thresholding as all probabilities will likely be \u003e 0.0."
        },
        "select_concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          },
          "title": "Select concepts in result by name or by id"
        },
        "training_timeout": {
          "type": "integer",
          "format": "int64",
          "title": "Training timeout of the model (in seconds)"
        }
      }
    },
    "apiOutputInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/apiData",
          "description": "List of concepts for the model."
        },
        "output_config": {
          "$ref": "#/definitions/apiOutputConfig",
          "description": "Model configuration."
        },
        "message": {
          "type": "string",
          "description": "For returning where to look for the Output info if not returning it."
        },
        "type": {
          "type": "string",
          "description": "To help clients know what type of Data to expect out of the model."
        },
        "type_ext": {
          "type": "string",
          "description": "Extra metadata about the Type data."
        }
      }
    },
    "apiPatchAppsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiApp"
          },
          "description": "This is a description i wanted to say."
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      }
    },
    "apiPatchConceptLanguagesRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "concept_id": {
          "type": "string"
        },
        "concept_languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConceptLanguage"
          }
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      },
      "description": "PATCH multiple concept languages for the given concept."
    },
    "apiPatchConceptsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          },
          "description": "This is a description i wanted to say."
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      }
    },
    "apiPatchInputsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInput"
          },
          "description": "This is a description i wanted to say."
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      }
    },
    "apiPatchKeysRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiKey"
          },
          "description": "This is a description i wanted to say."
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      }
    },
    "apiPatchModelsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiModel"
          },
          "description": "This is a description i wanted to say."
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      }
    },
    "apiPatchUsersRequest": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUser"
          },
          "description": "This is a description i wanted to say."
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      }
    },
    "apiPatchVocabsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "vocabs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiVocab"
          },
          "description": "The list of updates fields for the vocabs. Must have the \"id\" field set so that it can match on\nof the existing vocabs."
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      },
      "description": "PATCH one or more vocabs with this endpoint."
    },
    "apiPatchWorkflowsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "workflows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiWorkflow"
          },
          "description": "This is a description i wanted to say."
        },
        "action": {
          "type": "string",
          "description": "The action to perform with the objects in the PATCH."
        }
      }
    },
    "apiPlan": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "apiPostAppsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiApp"
          }
        }
      }
    },
    "apiPostConceptLanguagesRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "concept_id": {
          "type": "string"
        },
        "concept_languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConceptLanguage"
          }
        }
      },
      "description": "POST multiple concept languages for the given concept."
    },
    "apiPostConceptsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          },
          "description": "This is a description i wanted to say."
        }
      }
    },
    "apiPostConceptsSearchesRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet",
          "description": "Ids present in the url of the request."
        },
        "concept_query": {
          "$ref": "#/definitions/apiConceptQuery",
          "description": "The body of the request."
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "description": "Pagination parameters here since there are no url args in this\nPOST request."
        }
      }
    },
    "apiPostHistoricalUsageRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        }
      }
    },
    "apiPostHistoricalUsageResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "interval": {
          "$ref": "#/definitions/protobufDuration",
          "title": "in the future, we will also have an optional field for billing cycle:"
        },
        "usage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDimensionList"
          }
        }
      }
    },
    "apiPostInputsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInput"
          },
          "description": "This is a description i wanted to say."
        }
      }
    },
    "apiPostKeysRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiKey"
          }
        }
      }
    },
    "apiPostLoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "long_lived": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "title": "///////////\nLogin and Signup"
    },
    "apiPostModelFeedbackRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        },
        "input": {
          "$ref": "#/definitions/apiInput"
        }
      }
    },
    "apiPostModelOutputsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInput"
          }
        },
        "model": {
          "$ref": "#/definitions/apiModel",
          "description": "This allows you to specify config options for the model such as\nthe language which appear's in the model's output_info."
        }
      },
      "description": "//////////////////////////////////////////////////\nModel prediction related stuff needs inputs and produces outputs.\n//////////////////////////////////////////////////\nModel prediction."
    },
    "apiPostModelVersionMetricsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        },
        "max_examples": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "Evaluate this model version."
    },
    "apiPostModelVersionsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model_id": {
          "type": "string"
        },
        "model_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiModelVersion"
          },
          "description": "This lets you post an existing model version rather than training a new one.\nFor internal Clarifai use only to start."
        }
      },
      "description": "Create (train) a new model version."
    },
    "apiPostModelsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "model": {
          "$ref": "#/definitions/apiModel",
          "description": "NOTE: inconsistent since \"model\" is not plural, please use \"models\" below.\nPreviously you could only create one model at a time.\nWe still support this but you should pass it as models=[model] so\nthat this endpoint is consistent with the rest of our API."
        },
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiModel"
          },
          "description": "This allows you to create one or more model by posting it to the API."
        }
      }
    },
    "apiPostModelsSearchesRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet",
          "description": "Ids present in the url of the request."
        },
        "model_query": {
          "$ref": "#/definitions/apiModelQuery",
          "description": "The body of the request."
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "description": "Pagination parameters here since there are no url args in this\nPOST request."
        }
      },
      "description": "Search over the available models."
    },
    "apiPostSearchFeedbackRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "input": {
          "$ref": "#/definitions/apiInput"
        }
      }
    },
    "apiPostSearchesRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "query": {
          "$ref": "#/definitions/apiQuery"
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "brute_force": {
          "type": "boolean",
          "format": "boolean",
          "title": "Perform a brute force search visual search"
        }
      }
    },
    "apiPostSignupRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "company_name": {
          "type": "string"
        },
        "captcha_response_token": {
          "type": "string"
        },
        "aws_registration_token": {
          "type": "string",
          "title": "This field is only for registrations that come from the AWS marketplace"
        },
        "gdpr_consent": {
          "type": "boolean",
          "format": "boolean"
        },
        "tos_consent": {
          "type": "boolean",
          "format": "boolean"
        },
        "marketing_consent": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiPostSubscriptionRequest": {
      "type": "object",
      "properties": {
        "signup_code": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/apiPlan"
        }
      },
      "title": "FIXME: why is this used to change subscriptions as a POST and not PATCH?"
    },
    "apiPostTokenRequest": {
      "type": "object"
    },
    "apiPostUserConsentRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet",
          "description": "This can be the special user_id \"me\" as well."
        },
        "consent": {
          "type": "boolean",
          "format": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiPostVerifyEmailRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "apiPostVisualizationRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        }
      }
    },
    "apiPostVocabConceptsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "vocab_id": {
          "type": "string"
        },
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiConcept"
          }
        }
      },
      "description": "Add a concept(s) to the END of the vocab list."
    },
    "apiPostVocabsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "vocabs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiVocab"
          }
        }
      },
      "description": "POST new vocabs with this."
    },
    "apiPostWorkflowResultsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "workflow_id": {
          "type": "string"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInput"
          }
        },
        "output_config": {
          "$ref": "#/definitions/apiOutputConfig",
          "description": "FIXME(zeiler): the request for post workflows is using an outputconfig object that is supposed\nto be within models. This is not consistent with setting this on the request for post model\noutputs where it is inside a model object. To make this consistent we would send in the\nworkflow object so that each model can have it's own output config. If nobody is setting\nthis OutputConfig it would probably be easier to just remove it for now to keep things simpler\nand then it's more consistent we just don't support the OutputConfig on workflows."
        }
      }
    },
    "apiPostWorkflowResultsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "workflow": {
          "$ref": "#/definitions/apiWorkflow"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiWorkflowResult"
          }
        }
      }
    },
    "apiPostWorkflowsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "workflows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiWorkflow"
          },
          "description": "This is a description i wanted to say."
        }
      }
    },
    "apiPrecisionRecallCurve": {
      "type": "object",
      "properties": {
        "recall": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "precision": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "thresholds": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "apiPretrainedModelConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is the internal id of the pretrained model."
        },
        "type": {
          "type": "string",
          "description": "This is the intenral type of the pretrained model."
        }
      }
    },
    "apiQuery": {
      "type": "object",
      "properties": {
        "ands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAnd"
          }
        },
        "language": {
          "type": "string"
        }
      }
    },
    "apiROC": {
      "type": "object",
      "properties": {
        "fpr": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "tpr": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "thresholds": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "apiRealtimeCount": {
      "type": "object",
      "properties": {
        "op_type": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiRegion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "region_info": {
          "$ref": "#/definitions/apiRegionInfo"
        },
        "data": {
          "$ref": "#/definitions/apiData"
        }
      }
    },
    "apiRegionInfo": {
      "type": "object",
      "properties": {
        "bounding_box": {
          "$ref": "#/definitions/apiBoundingBox"
        },
        "value": {
          "type": "number",
          "format": "float"
        },
        "feedback": {
          "$ref": "#/definitions/apiRegionInfoFeedback"
        },
        "mask": {
          "$ref": "#/definitions/apiMask"
        }
      }
    },
    "apiRegionInfoFeedback": {
      "type": "string",
      "enum": [
        "accurate",
        "misplaced",
        "not_detected",
        "false_positive"
      ],
      "default": "accurate"
    },
    "apiScopeDeps": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "string"
        },
        "depending_scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiSingleAppResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "app": {
          "$ref": "#/definitions/apiApp"
        }
      }
    },
    "apiSingleConceptLanguageResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "concept_language": {
          "$ref": "#/definitions/apiConceptLanguage"
        }
      }
    },
    "apiSingleConceptResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "concept": {
          "$ref": "#/definitions/apiConcept"
        }
      }
    },
    "apiSingleInputCountResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "counts": {
          "$ref": "#/definitions/apiInputCount",
          "description": "NOTE: inconsistency: not named after the object name."
        }
      }
    },
    "apiSingleInputResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "input": {
          "$ref": "#/definitions/apiInput"
        }
      }
    },
    "apiSingleKeyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "key": {
          "$ref": "#/definitions/apiKey"
        }
      }
    },
    "apiSingleLoginResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "company_name": {
          "type": "string"
        },
        "date_joined": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "email_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEmailAddress"
          }
        },
        "session_token": {
          "type": "string"
        },
        "token_expires": {
          "type": "string"
        },
        "v2_user_id": {
          "type": "string"
        },
        "date_gdpr_consent": {
          "type": "string"
        },
        "date_tos_consent": {
          "type": "string"
        },
        "date_marketing_consent": {
          "type": "string"
        }
      }
    },
    "apiSingleModelResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "model": {
          "$ref": "#/definitions/apiModel"
        }
      }
    },
    "apiSingleModelVersionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "model_version": {
          "$ref": "#/definitions/apiModelVersion"
        }
      }
    },
    "apiSingleModelWeightResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "model": {
          "$ref": "#/definitions/apiModel"
        },
        "ct64": {
          "type": "string",
          "format": "byte",
          "description": "the base64 weights. When returned over json they will be returns as base64. When returned in a\nbinary response they will remain bytes."
        },
        "proto_download_url": {
          "type": "string",
          "title": "a url to download the weights as protos"
        }
      }
    },
    "apiSingleStatusCodeResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "Status of this request."
        }
      }
    },
    "apiSingleSubscriptionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "plan": {
          "$ref": "#/definitions/apiPlan"
        },
        "signup_code": {
          "type": "string"
        }
      }
    },
    "apiSingleTokenResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "apiSingleUserResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "user": {
          "$ref": "#/definitions/apiUser"
        }
      }
    },
    "apiSingleVerifyEmailResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        }
      }
    },
    "apiSingleVisualizationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "visualization_output": {
          "$ref": "#/definitions/apiVisualizationOutput"
        }
      }
    },
    "apiSingleVocabResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "vocab": {
          "$ref": "#/definitions/apiVocab"
        }
      },
      "description": "////////////////////\nResponses\n////////////////////\nA single vocab to return."
    },
    "apiSingleWorkflowResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus",
          "description": "This is a description i wanted to say."
        },
        "workflow": {
          "$ref": "#/definitions/apiWorkflow"
        }
      }
    },
    "apiStreamInputsRequest": {
      "type": "object",
      "properties": {
        "user_app_id": {
          "$ref": "#/definitions/apiUserAppIDSet"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        },
        "last_id": {
          "type": "string"
        },
        "descending": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiTestMessage": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "value": {
          "type": "string"
        },
        "byts": {
          "type": "string",
          "format": "byte"
        },
        "int_32": {
          "type": "integer",
          "format": "int64"
        },
        "int_64": {
          "type": "string",
          "format": "uint64"
        },
        "f_32": {
          "type": "number",
          "format": "float"
        },
        "f_64": {
          "type": "number",
          "format": "double"
        },
        "s": {
          "$ref": "#/definitions/protobufStruct",
          "title": "To handle arbitrary json you can use a struct field:\nhttps://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto"
        }
      }
    },
    "apiUsageInterval": {
      "type": "object",
      "properties": {
        "interval": {
          "type": "string"
        },
        "range": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "primary_email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "company_name": {
          "type": "string"
        },
        "bill_type": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "date_gdpr_consent": {
          "type": "string",
          "format": "date-time"
        },
        "date_tos_consent": {
          "type": "string",
          "format": "date-time"
        },
        "date_marketing_consent": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiUserAppIDSet": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        }
      },
      "description": "Common message to identify the app in a url endpoint."
    },
    "apiVideo": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "This is a URL to a publicly accessible video file. The platform will download this file server\nside and then process."
        },
        "base64": {
          "type": "string",
          "format": "byte",
          "description": "The base64 field is using video file bytes directly in the request.\nNOTE: if you're sending a json request, then this MUST be base64 encoded before sending (hence\nthe name here).\nWhen using our grpc clients, you DO NOT need to base64 encode\nit yourself since the clients know how to do this for you automatically and will avoid the\nbase64 encoding if they send a binary request."
        },
        "allow_duplicate_url": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiVisualizationOutput": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/apiData"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInput"
          }
        }
      }
    },
    "apiVocab": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is user unique id for the vocabulary."
        },
        "name": {
          "type": "string",
          "description": "A nice display name for the vocabulary."
        },
        "description": {
          "type": "string",
          "description": "A description of what this vocab is for."
        },
        "app_id": {
          "type": "string",
          "description": "The application id that this vocab belongs to."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        }
      },
      "title": "////////////////////\nMessages\n////////////////////\nThis represents a vocabulary which is an ordered list of concepts"
    },
    "apiW3C": {
      "type": "object",
      "properties": {
        "hex": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "apiWorkflow": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The concept's unique id."
        },
        "app_id": {
          "type": "string",
          "description": "The name of the concept in the given language."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the concept was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiWorkflowNode"
          }
        }
      }
    },
    "apiWorkflowNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "model": {
          "$ref": "#/definitions/apiModel"
        }
      }
    },
    "apiWorkflowResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/statusStatus"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the object was created. We follow the XXXX timestamp\nformat. We use https://www.ietf.org/rfc/rfc3339.txt format:\n\"2006-01-02T15:04:05.999999Z\" so you can expect results like\nthe following from the API:\n\"2017-04-11T21:50:50.223962Z\""
        },
        "model": {
          "$ref": "#/definitions/apiModel"
        },
        "input": {
          "$ref": "#/definitions/apiInput"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOutput"
          }
        }
      }
    },
    "protobufDuration": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64",
          "title": "Signed seconds of the span of time. Must be from -315,576,000,000\nto +315,576,000,000 inclusive. Note: these bounds are computed from:\n60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
        },
        "nanos": {
          "type": "integer",
          "format": "int32",
          "description": "Signed fractions of a second at nanosecond resolution of the span\nof time. Durations less than one second are represented with a 0\n`seconds` field and a positive or negative `nanos` field. For durations\nof one second or more, a non-zero value for the `nanos` field must be\nof the same sign as the `seconds` field. Must be from -999,999,999\nto +999,999,999 inclusive."
        }
      },
      "description": "A Duration represents a signed, fixed-length span of time represented\nas a count of seconds and fractions of seconds at nanosecond\nresolution. It is independent of any calendar and concepts like \"day\"\nor \"month\". It is related to Timestamp in that the difference between\ntwo Timestamp values is a Duration and it can be added or subtracted\nfrom a Timestamp. Range is approximately +-10,000 years.\n\n# Examples\n\nExample 1: Compute Duration from two Timestamps in pseudo code.\n\n    Timestamp start = ...;\n    Timestamp end = ...;\n    Duration duration = ...;\n\n    duration.seconds = end.seconds - start.seconds;\n    duration.nanos = end.nanos - start.nanos;\n\n    if (duration.seconds \u003c 0 \u0026\u0026 duration.nanos \u003e 0) {\n      duration.seconds += 1;\n      duration.nanos -= 1000000000;\n    } else if (durations.seconds \u003e 0 \u0026\u0026 duration.nanos \u003c 0) {\n      duration.seconds -= 1;\n      duration.nanos += 1000000000;\n    }\n\nExample 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\n    Timestamp start = ...;\n    Duration duration = ...;\n    Timestamp end = ...;\n\n    end.seconds = start.seconds + duration.seconds;\n    end.nanos = start.nanos + duration.nanos;\n\n    if (end.nanos \u003c 0) {\n      end.seconds -= 1;\n      end.nanos += 1000000000;\n    } else if (end.nanos \u003e= 1000000000) {\n      end.seconds += 1;\n      end.nanos -= 1000000000;\n    }\n\nExample 3: Compute Duration from datetime.timedelta in Python.\n\n    td = datetime.timedelta(days=3, minutes=10)\n    duration = Duration()\n    duration.FromTimedelta(td)\n\n# JSON Mapping\n\nIn JSON format, the Duration type is encoded as a string rather than an\nobject, where the string ends in the suffix \"s\" (indicating seconds) and\nis preceded by the number of seconds, with nanoseconds expressed as\nfractional seconds. For example, 3 seconds with 0 nanoseconds should be\nencoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\nbe expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\nmicrosecond should be expressed in JSON format as \"3.000001s\"."
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    },
    "statusBaseResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/statusStatus"
        }
      },
      "description": "Base message to return when there is a internal server error that\nis not caught elsewhere."
    },
    "statusStatus": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/statusStatusCode",
          "description": "Status code from internal codes."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the error."
        },
        "details": {
          "type": "string",
          "description": "More details of the given error."
        },
        "stack_trace": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "For some environment we may return a stack trace to help debug\nany issues."
        },
        "percent_completed": {
          "type": "integer",
          "format": "int64",
          "title": "specifically for long running jobs"
        },
        "time_remaining": {
          "type": "integer",
          "format": "int64",
          "title": "if status is pending, how much time is remaining (in seconds)"
        },
        "req_id": {
          "type": "string",
          "title": "If we want to return a request id in the base status field"
        },
        "internal_details": {
          "type": "string",
          "description": "Internal Annotation (do not set in production, for internal Clarifai use only)."
        }
      }
    },
    "statusStatusCode": {
      "type": "string",
      "enum": [
        "ZERO",
        "SUCCESS",
        "MIXED_STATUS",
        "FAILURE",
        "CONN_ACCOUNT_ISSUES",
        "CONN_TOKEN_INVALID",
        "CONN_CREDENTIALS_INVALID",
        "CONN_EXCEED_HOURLY_LIMIT",
        "CONN_EXCEED_MONTHLY_LIMIT",
        "CONN_THROTTLED",
        "CONN_EXCEEDS_LIMITS",
        "CONN_INSUFFICIENT_SCOPES",
        "CONN_KEY_INVALID",
        "CONN_KEY_NOT_FOUND",
        "CONN_BAD_REQUEST_FORMAT",
        "CONN_DOES_NOT_EXIST",
        "CONN_INVALID_REQUEST",
        "CONN_METHOD_NOT_ALLOWED",
        "CONN_NO_GDPR_CONSENT",
        "MODEL_TRAINED",
        "MODEL_TRAINING",
        "MODEL_UNTRAINED",
        "MODEL_QUEUED_FOR_TRAINING",
        "MODEL_TRAINING_NO_DATA",
        "MODEL_TRAINING_NO_POSITIVES",
        "MODEL_TRAINING_ONE_VS_N_SINGLE_CLASS",
        "MODEL_TRAINING_TIMED_OUT",
        "MODEL_TRAINING_WAITING_ERROR",
        "MODEL_TRAINING_UNKNOWN_ERROR",
        "MODEL_TRAINING_MSG_REDELIVER",
        "MODEL_MODIFY_SUCCESS",
        "MODEL_MODIFY_PENDING",
        "MODEL_MODIFY_FAILED",
        "MODEL_DOES_NOT_EXIST",
        "MODEL_PERMISSION_DENIED",
        "MODEL_INVALID_ARGUMENT",
        "MODEL_INVALID_REQUEST",
        "MODEL_EVALUATED",
        "MODEL_EVALUATING",
        "MODEL_NOT_EVALUATED",
        "MODEL_QUEUED_FOR_EVALUATION",
        "MODEL_EVALUATION_TIMED_OUT",
        "MODEL_EVALUATION_WAITING_ERROR",
        "MODEL_EVALUATION_UNKNOWN_ERROR",
        "MODEL_PREDICTION_FAILED",
        "MODEL_EVALUATION_MSG_REDELIVER",
        "MODEL_EVALUATION_NEED_LABELS",
        "MODEL_EVALUATION_NEED_INPUTS",
        "WORKFLOW_NO_MATCHING_INPUT",
        "WORKFLOW_REQUIRE_TRAINED_MODEL",
        "WORKFLOW_DUPLICATE",
        "WORKFLOW_UNSUPPORTED_FORMAT",
        "WORKFLOW_DOES_NOT_EXIST",
        "WORKFLOW_PERMISSION_DENIED",
        "WORKFLOW_INVALID_ARGUMENT",
        "WORKFLOW_INVALID_RECIPE",
        "WORKFLOW_INVALID_TEMPLATE",
        "WORKFLOW_INVALID_GRAPH",
        "WORKFLOW_INTERNAL_FAILURE",
        "WORKFLOW_INVALID_REQUEST",
        "WORKFLOW_MODIFY_SUCCESS",
        "WORKFLOW_MODIFY_PENDING",
        "WORKFLOW_MODIFY_FAILED",
        "CONCEPT_MODIFY_SUCCESS",
        "CONCEPT_MODIFY_PENDING",
        "CONCEPT_MODIFY_FAILED",
        "ANNOTATION_SUCCESS",
        "ANNOTATION_PENDING",
        "ANNOTATION_FAILED",
        "ANNOTATION_IN_PROGRESS",
        "INPUT_IMAGE_DOWNLOAD_SUCCESS",
        "INPUT_IMAGE_DOWNLOAD_PENDING",
        "INPUT_IMAGE_DOWNLOAD_FAILED",
        "INPUT_IMAGE_DOWNLOAD_IN_PROGRESS",
        "INPUT_IMAGE_STATUS_UPDATE_FAILED",
        "INPUT_IMAGE_DELETE_FAILED",
        "INPUT_IMAGE_DUPLICATE",
        "INPUT_IMAGE_UNSUPPORTED_FORMAT",
        "INPUT_IMAGE_DOES_NOT_EXIST",
        "INPUT_IMAGE_PERMISSION_DENIED",
        "INPUT_IMAGE_INVALID_ARGUMENT",
        "INPUT_IMAGE_MODIFY_SUCCESS",
        "INPUT_IMAGE_MODIFY_PENDING",
        "INPUT_IMAGE_MODIFY_FAILED",
        "ALL_INPUT_IMAGES_INVALID_BYTES",
        "INPUT_IMAGE_CLUSTER_SUCCESS",
        "INPUT_IMAGE_CLUSTER_PENDING",
        "INPUT_IMAGE_CLUSTER_FAILED",
        "INPUT_IMAGE_CLUSTER_IN_PROGRESS",
        "INPUT_VIDEO_DOWNLOAD_SUCCESS",
        "INPUT_VIDEO_DOWNLOAD_PENDING",
        "INPUT_VIDEO_DOWNLOAD_FAILED",
        "INPUT_VIDEO_DUPLICATE",
        "INPUT_VIDEO_UNSUPPORTED_FORMAT",
        "INPUT_VIDEO_DOES_NOT_EXIST",
        "INPUT_VIDEO_PERMISSION_DENIED",
        "INPUT_VIDEO_INVALID_ARGUMENT",
        "INPUT_VIDEO_MODIFY_SUCCESS",
        "INPUT_VIDEO_MODIFY_PENDING",
        "INPUT_VIDEO_MODIFY_FAILED",
        "ALL_INPUT_VIDEOS_INVALID_BYTES",
        "REQUEST_DISABLED_FOR_MAINTENANCE",
        "INPUT_WRITES_DISABLED_FOR_MAINTENANCE",
        "INPUT_INVALID_REQUEST",
        "PREDICT_INVALID_REQUEST",
        "SEARCH_INVALID_REQUEST",
        "CONCEPTS_INVALID_REQUEST",
        "DATABASE_DUPLICATE_KEY",
        "DATABASE_STATEMENT_TIMEOUT",
        "DATABASE_INVALID_ROWS_AFFECTED",
        "DATABASE_DEADLOCK_DETECTED",
        "DATABASE_FAIL_TASK",
        "DATABASE_FAIL_TO_GET_CONNECTIONS",
        "DATABASE_TOO_MANY_CLIENTS",
        "DATABASE_CONSTRAINT_VIOLATED",
        "ASYNC_WORKER_MULTI_ERRORS",
        "RPC_REQUEST_QUEUE_FULL",
        "RPC_SERVER_UNAVAILABLE",
        "RPC_REQUEST_TIMEOUT",
        "RPC_MAX_MESSAGE_SIZE_EXCEEDED",
        "RPC_CANCELED",
        "CLUSTER_INTERNAL_FAILURE",
        "EXTERNAL_CONNECTION_ERROR",
        "QUEUE_CONN_ERROR",
        "QUEUE_CLOSE_REQUEST_TIMEOUT",
        "QUEUE_CONN_CLOSED",
        "QUEUE_PUBLISH_ACK_TIMEOUT",
        "QUEUE_PUBLISH_ERROR",
        "QUEUE_SUBSCRIPTION_TIMEOUT",
        "QUEUE_SUBSCRIPTION_ERROR",
        "QUEUE_MARSHALLING_FAILED",
        "QUEUE_UNMARSHALLING_FAILED",
        "QUEUE_MAX_MSG_REDELIVERY_EXCEEDED",
        "QUEUE_ACK_FAILURE",
        "SQS_OVERLIMIT",
        "SQS_INVALID_RECEIPT_HANDLE",
        "SQS_UNKNOWN",
        "VISUALIZATION_SUCCESS",
        "VISUALIZATION_PENDING",
        "VISUALIZATION_FAILED",
        "VISUALIZATION_INVALID_REQUEST",
        "MISSING_APP_VISUALIZATION",
        "VISUALIZATION_TOO_MANY_URLS",
        "VISUALIZATION_FAILED_TO_SAMPLE_APP",
        "VISUALIZATION_FAILED_TO_EMBED",
        "VISUALIZATION_S3_ERROR",
        "SEARCH_INTERNAL_FAILURE",
        "SEARCH_PROJECTION_FAILURE",
        "SEARCH_PREDICTION_FAILURE",
        "SEARCH_BY_NOT_FULLY_INDEXED_INPUT",
        "STRIPE_EVENT_ERROR",
        "CACHE_MISS",
        "REDIS_SCRIPT_EXITED_WITH_FAILURE",
        "SIGNUP_EVENT_ERROR",
        "SIGNUP_FLAGGED",
        "APP_COUNT_INVALID_MESSAGE",
        "APP_COUNT_UPDATE_INCREMENT_FAILED",
        "APP_COUNT_REBUILD_FAILED",
        "APP_COUNT_INTERNAL_FAILURE",
        "MP_DOWNLOAD_ERROR",
        "MP_RESOLVE_DNS_ERROR",
        "MP_DOWNLOAD_MAX_SIZE_EXCEEDED_ERROR",
        "MP_IMAGE_DECODE_ERROR",
        "MP_INVALID_ARGUMENT",
        "MP_IMAGE_PROCESSING_ERROR",
        "USER_CONSERNT_FACE",
        "WORKER_ACTIVE",
        "WORKER_INACTIVE",
        "INTERNAL_SERVER_ISSUE",
        "INTERNAL_FETCHING_ISSUE",
        "INTERNAL_DATABASE_ISSUE",
        "INTERNAL_UNEXPECTED_TIMEOUT",
        "INTERNAL_UNEXPECTED_V1",
        "INTERNAL_UNEXPECTED_PANIC",
        "INTERNAL_UNEXPECTED_SPIRE",
        "INTERNAL_REDIS_UNAVAILABLE",
        "INTERNAL_RESOURCE_EXHAUSTED",
        "INTERNAL_REDIS_UNCATEGORIZED",
        "CONN_UNCATEGORIZED",
        "MODEL_UNCATEGORIZED",
        "INPUT_UNCATEGORIZED",
        "INTERNAL_UNCATEGORIZED",
        "BAD_REQUEST",
        "SERVER_ERROR"
      ],
      "default": "ZERO",
      "title": "- ZERO: to be revised and greatly expanded\n - SUCCESS: success\n - CONN_ACCOUNT_ISSUES: Clarifai Connection Codes: 11xxx\n - MODEL_TRAINED: Model/Custom Training related 20xxx\n - MODEL_QUEUED_FOR_TRAINING: Custom model is currently in queue for training, waiting on assets to process first.\n - CONCEPT_MODIFY_SUCCESS: Concept related 23xxx\n - ANNOTATION_SUCCESS: Annotation related 24xxx\n - INPUT_IMAGE_DOWNLOAD_SUCCESS: Input:Image related 30xxx\n - INPUT_VIDEO_DOWNLOAD_SUCCESS: Input:Video related 31xxx\n - PREDICT_INVALID_REQUEST: API formatting issues 4000x\n - DATABASE_DUPLICATE_KEY: Other related 400xx\n - QUEUE_CONN_ERROR: Queue related errors 41xxx\n - SQS_OVERLIMIT: SQS related errors 411xx\n - VISUALIZATION_SUCCESS: Visualization related 42xxx\n - SEARCH_INTERNAL_FAILURE: Search related errors 43xxxx\n - STRIPE_EVENT_ERROR: Stripe 44xxx\n - CACHE_MISS: Redis/Cache 45xxx\n - SIGNUP_EVENT_ERROR: Sift Science 46xxx\n - APP_COUNT_INVALID_MESSAGE: Application counts related errors 470xx\n - MP_DOWNLOAD_ERROR: Media processor related errors 471xx\n - USER_CONSERNT_FACE: User legal consent stauts related 50xxx\n - WORKER_ACTIVE: Workers 51xxx\n - INTERNAL_SERVER_ISSUE: Internal issues: 98xxx\n - CONN_UNCATEGORIZED: Uncategorized: 99xxx: move off as soon as known\n - BAD_REQUEST: Depreciated codes: migrate off these to one of the internal issues"
    }
  }
}
